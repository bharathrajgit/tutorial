const express = require('express')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const path = require('path')

const app = express()
app.use(express.json())
const dbPath = path.join(__dirname, 'cricketMatchDetails.db')

let db = null

const initializeDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running as http://localhost:3000/')
    })
  } catch (error) {
    console.log(`Error At ${error.message}`)
    process.exit(1)
  }
}

initializeDbAndServer()

const convertPlayerListDbObjectToResponseObject = dbObject => {
  return {
    playerId: dbObject.player_id,
    playerName: dbObject.player_name,
  }
}

const convertMatchListDbObjectToResponseObject = dbObject => {
  return {
    matchId: dbObject.match_id,
    match: dbObject.match,
    year: dbObject.year,
  }
}

//API 1(Returns a list of all the players in the player table)
app.get('/players/', async (request, response) => {
  const retrieveAllPlayerListQuery = `
    SELECT 
    *
    FROM 
    player_details`
  const retrieveAllPlayerList = await db.all(retrieveAllPlayerListQuery)
  response.send(
    retrieveAllPlayerList.map(eachItem =>
      convertPlayerListDbObjectToResponseObject(eachItem),
    ),
  )
})

//API 2(Returns a specific player based on the player ID)
app.get('/players/:playerId/', async (request, response) => {
  const {playerId} = request.params
  const retrievePlayerListQuery = `
    SELECT 
    *
    FROM 
    player_details
    WHERE player_id = ${playerId}`
  const retrievePlayerList = await db.get(retrievePlayerListQuery)
  response.send(convertPlayerListDbObjectToResponseObject(retrievePlayerList))
})

//API 3(Updates the details of a specific player based on the player ID)
app.put('/players/:playerId', async (request, response) => {
  const {playerId} = request.params
  const playerDetails = request.body
  const {playerName} = playerDetails
  const updateQuery = `
  UPDATE player_details
  SET player_name = '${playerName}'
  WHERE player_id = ${playerId}`
  await db.run(updateQuery)
  response.send('Player Details Updated')
})

//API 4(Returns the match details of a specific match)
app.get('/matches/:matchId', async (request, response) => {
  const {matchId} = request.params
  const retrieveMatchQuery = `
  SELECT 
  *
  FROM match_details
  WHERE match_id = ${matchId}`
  const retrieveMatch = await db.get(retrieveMatchQuery)
  response.send(convertMatchListDbObjectToResponseObject(retrieveMatch))
})

//API 5(Returns a list of all the matches of a player)
app.get('/players/:playerId/matches', async (request, response) => {
  const {playerId} = request.params
  const matchIdQuery = `
  SELECT 
  match_id
  FROM 
  player_match_score
  WHERE player_id = ${playerId}`
  const matchIds = await db.get(matchIdQuery)
  const matchDetailsQuery = `
  SELECT 
  *
  FROM match_details
  WHERE match_id = ${matchIds.match_id}`
  const matchDetails = await db.all(matchDetailsQuery)
  response.send(
    matchDetails.map(eachItem =>
      convertMatchListDbObjectToResponseObject(eachItem),
    ),
  )
})

//API 6(Return a list of players of a specific match)

app.get('/matches/:matchId/players', async (request, response) => {
  const {matchId} = request.params
  const playerIdQuery = `
  SELECT 
  player_id
  FROM 
  player_match_score
  WHERE match_id = ${matchId}`
  const playerIds = await db.get(playerIdQuery)
  const playerDetailsQuery = `
  SELECT 
  *
  FROM player_details
  WHERE player_id = ${playerIds.player_id}`
  const playerDetails = await db.all(playerDetailsQuery)
  response.send(playerDetails)
})

//API 7(Returns the statistics of total score, fours, sixes of a specific player based on the player ID)
app.get('/players/:playerId/playerScores/', async (request, response) => {
  const {playerId} = request.params
  const joinsQuery = `
  SELECT
  player_details.player_id AS playerId,
  player_details.player_name AS playerName,
  SUM(score) AS totalScore,
  SUM(fours) AS totalFours,
  SUM(sixes) AS totalSixes
  FROM player_match_score
  INNER JOIN player_details ON player_match_score.player_id = player_details.player_id`
  const joinsList = await db.all(joinsQuery)
  response.send(joinsList)
})

module.exports = app

app.get('/match/', async (request, response) => {
  const retrieveAllMatchListQuery = `
    SELECT 
    *
    FROM 
    match_details`
  const retrieveAllMatchList = await db.all(retrieveAllMatchListQuery)
  response.send(retrieveAllMatchList)
})
