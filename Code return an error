const express = require('express')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const path = require('path')

const app = express()
app.use(express.json())
const dbPath = path.join(__dirname, 'todoApplication.db')

let db = null

const initilizeDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (error) {
    console.log(`Error ${error.message}`)
  }
}

initilizeDbAndServer()

const hasPriorityAndStatusProperties = requestQuery => {
  return (
    requestQuery.priority !== undefined && requestQuery.status !== undefined
  )
}

const hasPriorityPropertie = requestQuery => {
  return requestQuery.priority !== undefined
}

const hasStatusProperties = requestQuery => {
  return requestQuery.status !== undefined
}

app.get('/todos/', async (request, response) => {
  let data = null
  let getTodoQuery = ''
  const {search_q = '', priority, status} = request.query

  switch (true) {
    case hasPriorityAndStatusProperties(request.query):
      getTodoQuery = `
      SELECT
      *
      FROM 
      todo
      WHERE todo LIKE '%${search_q}%'
      AND priority = '${priority}'
      AND status = '${status}'`
      break
    case hasPriorityPropertie(request.query):
      getTodoQuery = `
      SELECT 
      *
      FROM
      todo
      WHERE todo LIKE '%${search_q}%'
      AND priority = '${priority}'`
      break
    case hasStatusProperties(request.query):
      getTodoQuery = `
      SELECT 
      *
      FROM
      todo
      WHERE todo LIKE '%${search_q}%'
      AND status = '${status}'`
      break
    default:
      getTodoQuery = `
      SELECT 
      *
      FROM 
      todo
      WHERE todo LIKE '%${search_q}%'`
  }
  data = await db.all(getTodoQuery)
  response.send(data)
})

//API 2(Returns a specific todo based on the todo ID)
app.get('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const todoListQuery = `
  SELECT
  *
  FROM todo
  WHERE id = ${todoId}`
  const todoList = await db.all(todoListQuery)
  response.send(todoList)
})

//API 3(Create a todo in the todo table)
app.post('/todos', async (request, response) => {
  const todoDetails = request.body
  const {id, todo, priority, status} = todoDetails
  const createTodoQuery = `
  INSERT INTO todo(id, todo, priority, status)
  VALUES(
    ${id},
    '${todo}',
    '${priority}',
    '${status}'
  )`
  await db.run(createTodoQuery)
  response.send('Todo Successfully Added')
})

//API 4(Update the details of a specific todo based on the todo ID)
app.put('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const updateTodo = request.body
  let getTodoUpdateQuery = ''
  let message = ''

  switch (true) {
    case hasPriorityPropertie(request.body):
      getTodoUpdateQuery = `
      UPDATE todo
      SET priority = '${updateTodo.body}'
      WHERE id = ${todoId}`
      message = 'Priority Updated'
      break
    case hasStatusProperties(request.body):
      console.log('I am status')
      getTodoUpdateQuery = `
      UPDATE todo
      SET status = '${updateTodo.status}'
      WHERE id = ${todoId}`
      message = 'Status Updated'
      break
    default:
      getTodoUpdateQuery = `
      UPDATE todo 
      SET todo = '${updateTodo.todo}'
      WHERE id = ${todoId}`
      message = 'Todo Updated'
  }
  await db.run(getTodoUpdateQuery)
  response.send(message)
})

//API 5(Deleted a todo from the todo table based on the todo ID)
app.delete('/todos/:todoId/', async (request, response) => {
  console.log('Iam delete')
  const {todoId} = request.params
  console.log(todoId)
  const deleteTodoQuery = `
  DELETE FROM todo
  WHERE id = ${todoId}`
  await db.run(deleteTodoQuery)
  response.send('Todo Deleted')
})

module.exports = app
